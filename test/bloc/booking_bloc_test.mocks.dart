// Mocks generated by Mockito 5.4.4 from annotations
// in bloc_booking_app/test/bloc/booking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bloc_booking_app/domain/models/package.dart' as _i4;
import 'package:bloc_booking_app/domain/repos/tourism_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TourismRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTourismRepository extends _i1.Mock implements _i2.TourismRepository {
  MockTourismRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Package>> getPackages() => (super.noSuchMethod(
        Invocation.method(
          #getPackages,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Package>>.value(<_i4.Package>[]),
      ) as _i3.Future<List<_i4.Package>>);

  @override
  _i3.Future<bool> submitBooking(
    _i4.Package? package,
    int? numberOfTravelers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitBooking,
          [
            package,
            numberOfTravelers,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
